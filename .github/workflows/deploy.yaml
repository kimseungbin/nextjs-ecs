name: Deploy to ECS Fargate
on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - release
permissions:
  contents: read
  id-token: write # Required to fetch OpenID Connect token.
env:
  ECR_REPOSITORY:
jobs:
  deploy:
    name: Deploy to ECS Fargate
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    # replace branch name
    environment: ${{ github.ref == 'refs/heads/main' && 'stage' || github.ref == 'refs/heads/release' && 'production' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.OIDC_ARN }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./test-app
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
          cache-to: type=gha
          cache-from: type=gha, mode=max
      - name: Download task definition
        env:
          TASK_DEFINITION_FAMILY: ${{ vars.TASK_DEFINITION_FAMILY }}
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION_FAMILY \
            --query taskDefinition > task-definition.json
      - name: Render Amazon ECS Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ vars.TASK_DEFINITION_FAMILY }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSIOTRY }}:${{ github.sha }}
          container-name: ${{ vars.CONTAINER_NAME }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true
      - name: Invalidate CloudFront Distribution
        env:
          DISTRIBUTION_ID: ${{ vars.DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --path "/*"