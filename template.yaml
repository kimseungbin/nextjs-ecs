AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::LanguageExtensions
Description: Wishket Frontend AWS infrastructure.
Parameters:
  Project:
    Type: String
    Default: fe
  Environment:
    Type: String
    Description: Specifies the deployment environment for the AWS infrastructure.
    AllowedValues:
      - test
      - dev
      - stage
      - prod
  VpcCidr:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/16
    Description: The CIDR block of the VPC.
  CertificationArn:
    Type: String
    Description: |
      The ARN of the AWS Certificate Manager (ACM) certificate to use for SSL/TLS termination with the CloudFront distribution.
      This should be the ARN of a certificate that covers the domain or subdomain served by CloudFront.
  NestedStackBucket:
    Type: String
    Description: The name of Bucket holding nested stack templates.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - Project
      - Label:
          default: Network Configuration
        Parameters:
          - VpcCidr
Resources:

  #==================================================#
  # Elastic Container Registry                       #
  #==================================================#

  Repository1:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  Repository2:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  #==================================================#
  # Elastic Container Service                        #
  #==================================================#

  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${BucketName}.s3.${AWS::Region}.amazonaws.com/${FileName}
        - BucketName: !Ref NestedStackBucket
          FileName: network.yaml
      Parameters:
        VpcCidr: !Ref VpcCidr
  Cluster:
    Type: AWS::ECS::Cluster
  Service1:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer1
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: nextjs-container-1 # todo parameterize
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup1
  Service2:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer2
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: nextjs-container-2 # todo parameterize
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup2

  # noinspection YAMLSchemaValidation
  TaskDefinition1:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join:
          - '-'
          - - !Ref Project
            - !Ref Environment
            - 1
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt [ ExecutionRole, Arn ]
      ContainerDefinitions:
        - Name: nextjs-container-1 # todo parameterize
          Image: !GetAtt [ Repository1, RepositoryUri ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskDefinitionLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix:
                Fn::Join:
                  - '-'
                  - - !Ref Project
                    - nextjs-container-1 # todo parameterize
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
  # noinspection YAMLSchemaValidation
  TaskDefinition2:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join:
          - '-'
          - - !Ref Project
            - !Ref Environment
            - 2
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt [ ExecutionRole, Arn ]
      ContainerDefinitions:
        - Name: nextjs-container-2 # todo parameterize
          Image: !GetAtt [ Repository2, RepositoryUri ] # todo use different repository
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskDefinitionLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix:
                Fn::Join:
                  - '-'
                  - - !Ref Project
                    - nextjs-container-2 # todo parameterize
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy


  #      HealthCheckGracePeriodSeconds: 60

  #==================================================#
  # Application Monitoring                           #
  #==================================================#

  TaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  #==================================================#
  # Application Load Balancer                        #
  ApplicationLoadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
  ApplicationLoadBalancer2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
  HttpListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '403'
            ContentType: 'text/plain'
            MessageBody: 'Forbidden'
      LoadBalancerArn: !Ref ApplicationLoadBalancer1
      Port: 80
      Protocol: HTTP
  HttpListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '403'
            ContentType: 'text/plain'
            MessageBody: 'Forbidden'
      LoadBalancerArn: !Ref ApplicationLoadBalancer2
      Port: 80
      Protocol: HTTP
  HttpListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      Conditions:
        - Field: http-header
          # 왜 변수로 처리하나?
          # Secrets Manager 혹은 Parameter Store 룰 이용해서 업데이트 한다고 하더라도 다음과 같은 문제가 발생
          # 1. 어차피 CF 나 ALB 에 읽기 권한이 있으면 노출됨
          # 2. 로깅 시 헤더를 로깅한다면 노출 됨
          # 3. 값을 로테이션 돌린다고 하더라도 Cfn 업데이트는 별도이므로 구성이 복잡해짐
          # 4. 아래 내요으로도 한 번 더 보호할 예정
          # cf. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/restrict-access-to-load-balancer.html#limit-access-to-origin-using-aws-managed-prefixes
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header # todo parameterize
            Values:
              - random-value-1234567890 # todo parameterize
      ListenerArn: !Ref HttpListener1
      Priority: 1
  HttpListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values:
              - random-value-1234567890
      ListenerArn: !Ref HttpListener2
      Priority: 1
  #==================================================#
  # Content Distribution Network                     #
  #==================================================#
  # CDN Path pattern
  # cf. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern
  # noinspection YAMLSchemaValidation
  Distribution:
    Type: AWS::CloudFront::Distribution
    #    DependsOn:
    #      - DistributionLogsBucketPolicy
    DeletionPolicy: RetainExceptOnCreate # todo 개발 단계에서 distribution 지속적으로 생성 시 CloudFlare 에서 수동으로 수정해야할 일이 생김
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Test distribution for wishket FE.
        Origins:
          - Id: Service1
            DomainName: !GetAtt [ ApplicationLoadBalancer1, DNSName ]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: X-Custom-Header
                HeaderValue: random-value-1234567890
          - Id: Service2
            DomainName: !GetAtt [ ApplicationLoadBalancer2, DNSName ]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: X-Custom-Header
                HeaderValue: random-value-1234567890
        Aliases:
          - Fn::Sub:
              - ${Project}-${Environment}.wishdev.net
              - Project: !Ref Project
                Environment: !Ref Environment
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificationArn
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: Service1
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
        CacheBehaviors:
          - PathPattern: /service1/*
            TargetOriginId: Service1
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
          - PathPattern: /service2*
            TargetOriginId: Service2
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
  #==================================================#
  # Continuous Deployment                            #
  #==================================================#

  ArtifactStore:
    Type: AWS::S3::Bucket
  Connection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Join
        - '-'
        - - !Ref Project
          - !Ref Environment
      ProviderType: GitHub